openapi: 3.0.3
info:
  title: Tutter - OpenAPI 3.0
  version: 0.1.0
  description: |-
    
    Tutter is a simple social platform. Developed for PP'23.
    
    ## Posts
    
    For storage concerns, the maximum post length allowed on Tutter is only 260 UTF-8 symbol long.
    
    ## Users
    
    There is no authentication of any kind to use Tutter. You may post using any name you want. 
    Registration is also not required to use Tutter. New user accounts created upon the first time they post something.
    
    Similarly to posts, the maximum length of a username are 32 characters.
    
    ## Hashtags
    
    Hashtags are supported in posts. They are automatically parsed from the text of the posts.
    
    A hashtag may only consist of lower case letters from the english alphabet and numbers. Hashtags are parsed up to the first non-allowed symbol (usually a whitespace) or the end of the post. (For convenience upper case letters are allowed during parsing, but they will be treated lowercase) 
    
    There is also and endpoint to fetch posts which contain a specific hashtag.


externalDocs:
  description: More about PP Project
  url: https://pproj.org/

servers:
  - url: /api

tags:
  - name: post
    description: Create and read posts
  - name: tag
    description: Get hashtags and related posts
  - name: author
    description: Get authors and their posts

paths:
  /post:
    post:
      tags:
        - post
      summary: Create a new post
      description: ""
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPostBody'
      responses:
        '201':
          description: "Successfully created post"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWithAuthor'
        '400':
          description: "Invalid data supplied"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'

    get:
      tags:
        - post
      summary: "List posts"
      description: |
        Although this endpoint allow listing of all posts in a single response it is highly unadvised for performance concerns. Please always use some filters or limits!
        
        All ordering applied by the query parameters are based on the post ID.
      parameters:
        - name: before_id
          in: query
          description: |
            Limit results to posts with *lower* id than the given number (non-inclusion).
            
            **Warning:** Using `before_id` without using `after` or `after_id` may change the sorting order to **descending**, to make sense when using `limit`. (This may be overridden by `order`)
            
            **Warning:** Can **not** be used together with `before`.
            
            **Note:** The plus sign must be escaped in the query string to `%2b` otherwise it would fail to parse.
            
            **Hint:** You may use this together with `after` or `after_id` to specify a range.
          required: false
          schema:
            type: integer
            format: uint64
            example: 10
        - name: after_id
          in: query
          description: |
            Limit results to posts with *higher* id than the given number (non-inclusion).
            
            **Warning:** Using `after_id` without using `before` or `before_id` may change the sorting order to **ascending**, to make sense when using `limit`. (This may be overridden by `order`)
            
            **Warning:** Can **not** be used together with `after`.
            
            **Note:** The plus sign must be escaped in the query string to `%2b` otherwise it would fail to parse.
            
            **Hint:** You may use this together with `before` or `before_id` to specify a range.
          required: false
          schema:
            type: integer
            format: uint64
            example: 10
        - name: before
          in: query
          description: |
            Limit results to posts created *before* the given timestamp (non-inclusion).
            
            **Warning:** Using `before` without using `after` or `after_id` may change the sorting order to **descending**, to make sense when using `limit`. (This may be overridden by `order`)
            
            **Warning:** Can **not** be used together with `before_id`.
            
            **Note:** The plus sign must be escaped in the query string to `%2b` otherwise it would fail to parse.
            
            **Hint:** You may use this together with `after` or `after_id` to specify a range.
          required: false
          schema:
            type: string
            format: date-time
            example: "2023-03-26T18:18:19.372375+02:00"
        - name: after
          in: query
          description: |
            Limit results to posts created *after* the given timestamp (non-inclusion).
            
            **Warning:** Using `after` without using `before` or `before_id` may change the sorting order to **ascending**, to make sense when using `limit`. (This may be overridden by `order`)
            
            **Warning:** Can **not** be used together with `after_id`.
            
            **Note:** The plus sign must be escaped in the query string to `%2b` otherwise it would fail to parse.
            
            **Hint:** You may use this together with `before` or `before_id` to specify a range.
          required: false
          schema:
            type: string
            format: date-time
            example: "2023-03-26T18:18:19.372375+02:00"
        - name: order
          in: query
          description: |
            Change the ordering of the posts to either *ascending* or *descending* **before** applying limit.
            
            **Warning:** This will override the implicit ordering by `after`, `after_id`, `before` or `before_id`.
            
            **Hint:** You may use this together with `limit` to get the *last N posts*.
          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: "asc"
        - name: tag
          in: query
          description: |
            When specified, filter to posts that have the given tag(s).
            May be specified multiple times, to match more than one tag (union/OR).

          required: false
          schema:
            type: string
            example: example
        - name: author_id
          in: query
          description: |
            When specified, filter to posts from a given author by their ID.
            May be specified multiple times, to match more than one author (union/OR).

          required: false
          schema:
            type: integer
            format: uint
            example: 12
        - name: limit
          in: query
          description: |
            Limit the maximum number of results.
            
            
            **Note:** Must be >0
            
            
            **Hint:** Useful in combination with `before`, `before_id`, `after` or `after_id`.

          required: false
          schema:
            type: integer
            format: uint
            example: 10
      responses:
        '200':
          description: "List of matching posts (or empty array for no match)"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostWithAuthor'

  /post/{postId}:
    get:
      tags:
        - post
      summary: "Get a specific post"
      parameters:
        - name: postId
          in: path
          description: Numeric ID of the Post to get
          required: true
          schema:
            type: integer
            format: uint64
            example: 10
      responses:
        '200':
          description: "Post content"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWithAuthor'
        '404':
          description: "Post not found"
  /tag:
    get:
      tags:
        - tag
      summary: "List hashtags"
      description: "List all known hashtags WITHOUT their related posts"
      parameters: []
      responses:
        '200':
          description: "List of known hashtags (or empty array if there is none)"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'

  /tag/{hashtag}:
    get:
      tags:
        - tag
      summary: "Get a specific hashtag with related posts"
      description: "Although this endpoint allow listing of all posts related to a hashtag in a single response may raise performance concerns. It is recommended to use some filters or limits!"
      parameters:
        - name: hashtag
          in: path
          description: hashtag to get
          required: true
          schema:
            type: string
            example: example
      responses:
        '200':
          description: "Hashtag info with matching related posts"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagWithPosts'
        '404':
          description: "Hashtag not found (probably never used before)"

  /author:
    get:
      tags:
        - author
      summary: "List authors"
      description: "Get a list of all authors WITHOUT their posts"
      responses:
        '200':
          description: "List of authors"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'

  /author/{authorId}:
    get:
      tags:
        - author
      summary: "Get a specific author with their posts"
      parameters:
        - name: authorId
          in: path
          description: numeric ID of the author
          required: true
          schema:
            type: integer
            format: uint
            example: 1
      responses:
        '200':
          description: "Author info with their matching posts"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorWithPosts'
        '404':
          description: "No such author (haven't posted anything yet)"

components:
  schemas:
    NewPostBody:
      type: object
      description: "All HTML tags are automatically removed but maximum post length checked before that."
      properties:
        author:
          type: string
          example: "Marcsello"
        text:
          type: string
          example: "This is an #example #post"
    Post:
      type: object
      properties:
        id:
          type: integer
          format: uint64
          example: 10
        created_at:
          type: string
          format: date-time
          example: "2023-03-26T18:18:19.372375+02:00"
        text:
          type: string
          example: "This is an #example #post"
        tags:
          type: array
          items:
            type: string
            description: "Hashtags in the post without the hashmark"
            example: ["example", "post"]
    PostWithAuthor:
      type: object
      properties:
        id:
          type: integer
          format: uint64
          example: 10
        created_at:
          type: string
          format: date-time
          example: "2023-03-26T18:18:19.372375+02:00"
        text:
          type: string
          example: "This is an #example #post"
        author:
          $ref: '#/components/schemas/Author'
        tags:
          type: array
          items:
            type: string
            description: "Hashtags in the post without the hashmark"
            example: ["example", "post"]
    Tag:
      type: object
      properties:
        tag:
          type: string
          example: "example"
          description: "The hashtag text without the hashmark"
        first_seen:
          type: string
          format: date-time
          example: "2023-03-26T18:18:19.372375+02:00"
          description: "The first time this hashtag was used"

    TagWithPosts:
      type: object
      properties:
        tag:
          type: string
          example: "example"
          description: "The hashtag text without the hashmark"
        first_seen:
          type: string
          format: date-time
          example: "2023-03-26T18:18:19.372375+02:00"
          description: "The first time this hashtag was used"
        posts:
          description: "A list of posts that have this hashtag"
          type: array
          items:
            $ref: '#/components/schemas/Post'
    Author:
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 1
        first_seen:
          type: string
          format: date-time
          example: "2023-03-26T18:18:19.372375+02:00"
          description: "The first time this author posted something"
        name:
          type: string
          example: "Marcsello"
    AuthorWithPosts:
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 1
        first_seen:
          type: string
          format: date-time
          example: "2023-03-26T18:18:19.372375+02:00"
          description: "The first time this author posted something"
        name:
          type: string
          example: "Marcsello"
        posts:
          description: "A list of posts created by this author"
          type: array
          items:
            $ref: '#/components/schemas/Post'
    UserErrorResponse:
      type: object
      description: "The usual body of all 400 error responses"
      properties:
        reason:
          type: string
          example: "Something was invalid somewhere"
    InternalServerErrorResponse:
      type: object
      description: "The usual body of all 500 error responses"
      properties:
        error:
          type: string
          example: "Could not do some magic"