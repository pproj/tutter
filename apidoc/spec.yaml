openapi: 3.0.3
info:
  title: Tutter - OpenAPI 3.0
  version: 0.1.1
  description: |-
    
    Tutter is a simple social platform. Developed for PP'23.
    
    ## Posts
    
    For storage concerns, the maximum post length allowed on Tutter is only 260 UTF-8 symbol long.
    
    ## Users
    
    There is no authentication of any kind to use Tutter. You may post using any name you want. 
    Registration is also not required to use Tutter. New user accounts created upon the first time they post something.
    
    The maximum length of a username are 32 characters and it may only contain lowercase letters from the english alphabet, numbers and underscore (`_`).
    
    Example regex for valid username: `^[a-z0-9_]+$`
    
    ## Hashtags
    
    Hashtags are supported in posts. They are automatically parsed from the text of the posts.
    
    A hashtag may only consist of lowercase letters from the english alphabet and numbers. Hashtags are parsed up to the first non-allowed symbol (usually a whitespace) or the end of the post. (For convenience upper case letters are allowed during parsing, but they will be treated lowercase) 
    
    Example regex to search for hashtags: `#[a-zA-Z0-9]+`
    
    ## Long-polling
    
    The backend supports long-polling for new posts by the `/poll` endpoint. The server-side timeout for polling is about 2 minutes.
    
    The recommended way of using this enpoint is to first use any other endpoint to fetch some posts, then take the highest id from these posts, and use it as the `last` parameter of the `/poll` endpoint. Any posts returned by the endpoint should be added to the list of already recieved posts, then take the highest id of the returned posts and start over.
    
    It is always recommended to use the `last` parameter of the `/poll` endpoint. If not provided the backend will take the id of the last post, and return posts newer than that. If your client have missed that post (or posts before that), it won't recieve it at all.



externalDocs:
  description: More about PP Project
  url: https://pproj.org/

servers:
  - url: /api

tags:
  - name: post
    description: Create and read posts
  - name: tag
    description: Get hashtags and related posts
  - name: author
    description: Get authors and their posts

paths:
  /post:
    post:
      tags:
        - post
      summary: Create a new post
      description: ""
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPostBody'
      responses:
        '201':
          description: "Successfully created post"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWithAuthor'
        '400':
          description: "Invalid data supplied"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'

    get:
      tags:
        - post
      summary: "List posts"
      description: |
        Although this endpoint allow listing of all posts in a single response it is highly unadvised for performance concerns. Please always use some filters or limits!
        
        All ordering applied by the query parameters are based on the post ID.
        
        
        ## Filter evaluation order
        1. `tag`, `author_id`
        2. `after`, `after_id`, `before`, `before_id`
        3. `order`
        4. `limit`, `offset`
        
        This roughly means, that the backend interprets the first parameters first to form a result set, then the subsequent parameters can be used to further narrow down this result set. `limit` and `offset` are evaluated last, so that they can be used to paginate a large result set.

      parameters:
        - name: before_id
          in: query
          description: |
            Limit results to posts with *lower* id than the given number (non-inclusion).
            
            **Warning:** Using `before_id` without using `after` or `after_id` may change the sorting order to **descending**, to make sense when using `limit`. (This may be overridden by `order`)
            
            **Warning:** Can **not** be used together with `before`.
            
            **Hint:** You may use this together with `after` or `after_id` to specify a range.
          required: false
          schema:
            type: integer
            format: uint64
            example: 10
        - name: after_id
          in: query
          description: |
            Limit results to posts with *higher* id than the given number (non-inclusion).
            
            **Warning:** Using `after_id` without using `before` or `before_id` may change the sorting order to **ascending**, to make sense when using `limit`. (This may be overridden by `order`)
            
            **Warning:** Can **not** be used together with `after`.
            
            **Hint:** You may use this together with `before` or `before_id` to specify a range.
          required: false
          schema:
            type: integer
            format: uint64
            example: 10
        - name: before
          in: query
          description: |
            Limit results to posts created *before* the given timestamp (non-inclusion).
            
            **Warning:** Using `before` without using `after` or `after_id` may change the sorting order to **descending**, to make sense when using `limit`. (This may be overridden by `order`)
            
            **Warning:** Can **not** be used together with `before_id`.
            
            **Note:** The plus sign must be escaped in the query string to `%2b` otherwise it would fail to parse.
            
            **Hint:** You may use this together with `after` or `after_id` to specify a range.
          required: false
          schema:
            type: string
            format: date-time
            example: "2023-03-26T18:18:19.372375+02:00"
        - name: after
          in: query
          description: |
            Limit results to posts created *after* the given timestamp (non-inclusion).
            
            **Warning:** Using `after` without using `before` or `before_id` may change the sorting order to **ascending**, to make sense when using `limit`. (This may be overridden by `order`)
            
            **Warning:** Can **not** be used together with `after_id`.
            
            **Note:** The plus sign must be escaped in the query string to `%2b` otherwise it would fail to parse.
            
            **Hint:** You may use this together with `before` or `before_id` to specify a range.
          required: false
          schema:
            type: string
            format: date-time
            example: "2023-03-26T18:18:19.372375+02:00"
        - name: tag
          in: query
          description: |
            When specified, filter to posts that have the given tag(s).
            May be specified multiple times, to match more than one tag (union/OR).

          required: false
          schema:
            type: string
            example: example
        - name: author_id
          in: query
          description: |
            When specified, filter to posts from a given author by their ID.
            May be specified multiple times, to match more than one author (union/OR).

          required: false
          schema:
            type: integer
            format: uint
            example: 12
        - name: limit
          in: query
          description: |
            Limit the maximum number of results.
            
            
            **Note:** Must be >0
            
            **Hint:** May be useful in combination with `before`, `before_id`, `after` or `after_id`.
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: integer
            format: uint
            example: 10
        - name: offset
          in: query
          description: |
            Offset the result set.
            
            **Note:** Must be >0
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: integer
            format: uint64
            example: 12
        - name: order
          in: query
          description: |
            Change the ordering of the posts to either *ascending* or *descending* **before** applying limit.
            
            **Warning:** This will override the implicit ordering by `after`, `after_id`, `before` or `before_id`.
            
            **Hint:** You may use this together with `limit` to get the *last N posts*.
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: "asc"
      responses:
        '200':
          description: "List of matching posts (or empty array for no match)"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostWithAuthor'
        '400':
          description: "Invalid or conflicting query parameters provided"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'

  /post/{postId}:
    get:
      tags:
        - post
      summary: "Get a specific post"
      parameters:
        - name: postId
          in: path
          description: Numeric ID of the Post to get
          required: true
          schema:
            type: integer
            format: uint64
            example: 10
      responses:
        '200':
          description: "Post content"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWithAuthor'
        '404':
          description: "Post not found"

        '400':
          description: "Invalid postId provided"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'

  /poll:
    get:
      tags:
        - post
      summary: "Long polling for new posts"
      description: |
        This endpoint will block for max. 2 minutes. If any new post is posted during that it will return with a list of posts.
      parameters:
        - name: last
          in: query
          description: |
            Numeric ID of the last Post the client recieved
            
            In other words, this endpoint will only return for posts that are posted after this id. (same as `after_id` parameter in `/post`)
            
            **Warning:** This is not a mandatory parameter, but it is highly recommended to use it, otherwise you may miss some posts.
          required: false
          schema:
            type: integer
            format: uint64
            example: 10
        - name: tag
          in: query
          description: |
            Hashtag to filter for posts that contain this hashtag.
            
            In other words, wait for posts that contain this hashtag.
            
            **Warning:** Can **not** be used together with `author_id`.
            
            **Note:** Unlike the post filters, this parameter here can not be specified multiple times.

          required: false
          schema:
            type: string
            example: "example"
        - name: author_id
          in: query
          description: |
            Numeric ID of author to filter new posts only from this author.
            
            In other words, wait for posts that are from this author.
            
            **Warning:** Can **not** be used together with `tag`.
            
            **Note:** Unlike the post filters, this parameter here can not be specified multiple times.

          required: false
          schema:
            type: integer
            format: uint
            example: 10

      responses:
        '200':
          description: "New posts"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostWithAuthor'

        '204':
          description: "Nothing was posted during the life of the long poll"

        '400':
          description: "Invalid or conflicting query parameters provided"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'


  /tag:
    get:
      tags:
        - tag
      summary: "List hashtags"
      description: |
        List all known hashtags WITHOUT their related posts
      parameters:
        - name: limit
          in: query
          description: |
            Limit the maximum number of results.
            
            **Note:** Must be >0
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: integer
            format: uint
            example: 10
        - name: offset
          in: query
          description: |
            Offset the result set.
            
            **Note:** Must be >0
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: integer
            format: uint
            example: 12
        - name: order
          in: query
          description: |
            Change the ordering of the results.
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: "asc"
      responses:
        '200':
          description: "List of known hashtags (or empty array if there is none)"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '400':
          description: "Invalid or conflicting query parameters provided"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'

  /tag/{hashtag}:
    get:
      tags:
        - tag
      summary: "Get a specific hashtag with related posts"
      description: "Although this endpoint allow listing of all posts related to a hashtag in a single response may raise performance concerns. It is recommended to use some filters or limits!"
      parameters:
        - name: hashtag
          in: path
          description: hashtag to get
          required: true
          schema:
            type: string
            example: example
        - name: fill
          in: query
          description: |
            Populate the `posts` field with posts that contain this tag. All ordering parameters are evaluated over this list.

          required: false
          schema:
            type: boolean
            default: true
            example: false
        - name: limit
          in: query
          description: |
            Limit the maximum number of results in the `posts` field.
            
            **Warning:** Works only if the `fill` parameter is `true` (which is the default).

            **Note:** Must be >0
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: integer
            format: uint
            example: 10
        - name: offset
          in: query
          description: |
            Offset the result set in the `posts` field.

            **Warning:** Works only if the `fill` parameter is `true` (which is the default).
            
            **Note:** Must be >0
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: integer
            format: uint64
            example: 12
        - name: order
          in: query
          description: |
            Change the ordering of the results in the `posts` field.

            **Warning:** Works only if the `fill` parameter is `true` (which is the default).
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: "asc"
      responses:
        '200':
          description: "Hashtag info with matching related posts"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagWithPosts'
        '404':
          description: "Hashtag not found (probably never used before)"

        '400':
          description: "Invalid or conflicting query parameters, or hashtag provided"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'

  /trending:
    get:
      tags:
        - tag
      summary: "Get trending hashtags"
      description: |
        Simplified list of hashtags that are considered trending. This endpoint does not support paging. 
        There is also no guarantee that the returned tags are actually existing (used in any posts).
      parameters: []
      responses:
        '200':
          description: "List of known hashtags (or empty array if there is none)"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: "string"
                  example: "example"

  /author:
    get:
      tags:
        - author
      summary: "List authors"
      description: "Get a list of all authors WITHOUT their posts"
      parameters:
        - name: name
          in: query
          description: |
            When specified, filter authors by their name.
            May be specified multiple times, to match more than one author (union/OR).
            
            **Hint:** This might be useful to resolve author name to id. However this endpoint will return an empty list if there is no author with the given name (because this is a filter parameter afterall).
          required: false
          schema:
            type: string
            example: "marcsello"
        - name: limit
          in: query
          description: |
            Limit the maximum number of results.
            
            **Note:** Must be >0
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: integer
            format: uint
            example: 10
        - name: offset
          in: query
          description: |
            Offset the result set.
            
            **Note:** Must be >0
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: integer
            format: uint
            example: 12
        - name: order
          in: query
          description: |
            Change the ordering of the results.
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: "asc"
      responses:
        '200':
          description: "List of authors"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        '400':
          description: "Invalid or conflicting query parameters provided"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'

  /author/{authorId}:
    get:
      tags:
        - author
      summary: "Get a specific author with their posts"
      parameters:
        - name: authorId
          in: path
          description: numeric ID of the author
          required: true
          schema:
            type: integer
            format: uint
            example: 1
        - name: fill
          in: query
          description: |
            Populate the `posts` field with posts by this author. All ordering parameters are evaluated over this list.

          required: false
          schema:
            type: boolean
            default: true
            example: false
        - name: limit
          in: query
          description: |
            Limit the maximum number of results in the `posts` field.
            
            **Warning:** Works only if the `fill` parameter is `true` (which is the default).

            **Note:** Must be >0
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: integer
            format: uint
            example: 10
        - name: offset
          in: query
          description: |
            Offset the result set in the `posts` field.

            **Warning:** Works only if the `fill` parameter is `true` (which is the default).
            
            **Note:** Must be >0
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: integer
            format: uint64
            example: 12
        - name: order
          in: query
          description: |
            Change the ordering of the results in the `posts` field.

            **Warning:** Works only if the `fill` parameter is `true` (which is the default).
            
            **Note:** `order` is evaluated before `limit` and `offset`.
            
            **Note:** `limit` and `offset` are always evaluated last.

          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: "asc"
      responses:
        '200':
          description: "Author info with their matching posts"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorWithPosts'
        '404':
          description: "No such author (haven't posted anything yet)"

        '400':
          description: "Invalid or conflicting query parameters, or authorId provided"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'

components:
  schemas:
    NewPostBody:
      type: object
      description: "All HTML tags are automatically removed but maximum post length checked before that."
      properties:
        author:
          type: string
          example: "Marcsello"
        text:
          type: string
          example: "This is an #example #post"
    Post:
      type: object
      properties:
        id:
          type: integer
          format: uint64
          example: 10
        created_at:
          type: string
          format: date-time
          example: "2023-03-26T18:18:19.372375+02:00"
        text:
          type: string
          example: "This is an #example #post"
        tags:
          type: array
          items:
            type: string
            description: "Hashtags in the post without the hashmark"
            example: ["example", "post"]
    PostWithAuthor:
      type: object
      properties:
        id:
          type: integer
          format: uint64
          example: 10
        created_at:
          type: string
          format: date-time
          example: "2023-03-26T18:18:19.372375+02:00"
        text:
          type: string
          example: "This is an #example #post"
        author:
          $ref: '#/components/schemas/Author'
        tags:
          type: array
          items:
            type: string
            description: "Hashtags in the post without the hashmark"
            example: ["example", "post"]
    Tag:
      type: object
      properties:
        tag:
          type: string
          example: "example"
          description: "The hashtag text without the hashmark"
        first_seen:
          type: string
          format: date-time
          example: "2023-03-26T18:18:19.372375+02:00"
          description: "The first time this hashtag was used"

    TagWithPosts:
      type: object
      properties:
        tag:
          type: string
          example: "example"
          description: "The hashtag text without the hashmark"
        first_seen:
          type: string
          format: date-time
          example: "2023-03-26T18:18:19.372375+02:00"
          description: "The first time this hashtag was used"
        posts:
          description: "A list of posts that have this hashtag"
          type: array
          items:
            $ref: '#/components/schemas/Post'
    Author:
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 1
        first_seen:
          type: string
          format: date-time
          example: "2023-03-26T18:18:19.372375+02:00"
          description: "The first time this author posted something"
        name:
          type: string
          example: "Marcsello"
    AuthorWithPosts:
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 1
        first_seen:
          type: string
          format: date-time
          example: "2023-03-26T18:18:19.372375+02:00"
          description: "The first time this author posted something"
        name:
          type: string
          example: "Marcsello"
        posts:
          description: "A list of posts created by this author"
          type: array
          items:
            $ref: '#/components/schemas/Post'
    UserErrorResponse:
      type: object
      description: "The usual body of all 400 error responses"
      properties:
        reason:
          type: string
          example: "Something was invalid somewhere"
    InternalServerErrorResponse:
      type: object
      description: "The usual body of all 500 error responses"
      properties:
        error:
          type: string
          example: "Could not do some magic"